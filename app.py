from flask import Flask, render_template, request, redirect, url_for, session, flash
import os
import secrets
import numpy as np
from PIL import Image
from werkzeug.utils import secure_filename
from huggingface_hub import hf_hub_download
from tensorflow.keras.models import load_model

app = Flask(__name__)
app.secret_key = secrets.token_hex(16)

UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

ALLOWED_IMG = {'png', 'jpg', 'jpeg', 'bmp', 'gif'}

# ========== T·∫£i model t·ª´ Hugging Face ==========
MODEL_REPO = "minhtriizkooooo/EMR-Analysis-Cancer_Detection"
MODEL_FILENAME = "best_weights_model.keras"  # b·∫°n x√°c nh·∫≠n l·∫°i t√™n ch√≠nh x√°c trong repo

model = None
try:
    print("‚è≥ ƒêang t·∫£i model t·ª´ Hugging Face ‚Ä¶")
    model_path = hf_hub_download(repo_id=MODEL_REPO, filename=MODEL_FILENAME)
    model = load_model(model_path)
    print("‚úÖ Model ƒë√£ ƒë∆∞·ª£c t·∫£i v√† load th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i ho·∫∑c load model t·ª´ HF: {e}")
    model = None

def allowed_file(filename):
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_IMG

# ========== Routes ==========
@app.route("/", methods=["GET", "POST"])
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user_id = request.form.get("userID")
        password = request.form.get("password")
        # Thay ƒë·ªïi th√¥ng tin ƒëƒÉng nh·∫≠p n·∫øu c·∫ßn
        if user_id == "user_demo" and password == "Test@123456":
            session["user"] = user_id
            print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
            return redirect(url_for("dashboard"))
        else:
            flash("Sai th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i.", "danger")
            return redirect(url_for("login"))
    return render_template("index.html")

@app.route("/logout")
def logout():
    session.clear()
    print("üëã Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.")
    return redirect(url_for("login"))

@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        flash("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.", "danger")
        return redirect(url_for("login"))
    return render_template("dashboard.html")

@app.route("/emr_prediction", methods=["GET", "POST"])
def emr_prediction():
    if "user" not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.", "danger")
        return redirect(url_for("login"))

    filename = None
    image_b64 = None
    prediction = None

    if request.method == "POST":
        if "file" not in request.files:
            flash("Ch∆∞a ch·ªçn h√¨nh ·∫£nh ƒë·ªÉ t·∫£i l√™n!", "danger")
            return redirect(request.url)
        file = request.files["file"]
        if file.filename == "":
            flash("B·∫°n ch∆∞a ch·ªçn file!", "danger")
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config["UPLOAD_FOLDER"], filename)
            file.save(filepath)
            print(f"üìÇ ·∫¢nh ƒë√£ t·∫£i l√™n: {filepath}")

            if model is None:
                flash("Model ch∆∞a ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!", "danger")
                return render_template("emr_prediction.html", filename=filename)

            try:
                img = Image.open(filepath).convert("RGB").resize((224,224))
                arr = np.array(img)/255.0
                arr = np.expand_dims(arr, axis=0)

                preds = model.predict(arr)
                prob = float(preds[0][0])
                label = "Nodule" if prob > 0.5 else "Non-nodule"
                prediction = {"result": label, "probability": prob}

                print(f"‚úÖ D·ª± ƒëo√°n th√†nh c√¥ng: {label} v·ªõi x√°c su·∫•t {prob:.4f}")
            except Exception as e:
                flash(f"L·ªói khi ph√¢n t√≠ch ·∫£nh: {e}", "danger")
                print(f"‚ùå L·ªói khi ph√¢n t√≠ch ·∫£nh: {e}")
        else:
            flash("ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ª£p l·ªá!", "danger")

    return render_template("emr_prediction.html",
                           filename=filename,
                           image_b64=image_b64,
                           prediction=prediction)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
