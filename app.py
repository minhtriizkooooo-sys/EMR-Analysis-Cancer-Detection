from flask import Flask, render_template, request, redirect, url_for, session, flash
import os
import numpy as np
from tensorflow.keras.models import load_model
from PIL import Image
from huggingface_hub import hf_hub_download

# =============================
# C·∫•u h√¨nh Flask
# =============================
app = Flask(__name__)
app.secret_key = "supersecretkey"  # C·∫ßn cho session v√† flash message

# =============================
# T·∫£i model t·ª´ Hugging Face
# =============================
MODEL_REPO = "minhtriizkooooo/EMR-Analysis-Cancer_Detection"
MODEL_FILENAME = "best_weights_model.keras"

print("üîΩ ƒêang t·∫£i model t·ª´ Hugging Face...")
try:
    model_path = hf_hub_download(repo_id=MODEL_REPO, filename=MODEL_FILENAME)
    model = load_model(model_path)
    print("‚úÖ Model ƒë√£ t·∫£i th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i model: {e}")
    model = None

# =============================
# Trang ch·ªß (Login)
# =============================
@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    user_id = request.form.get('userID')
    password = request.form.get('password')

    # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p (demo)
    if user_id == 'user_demo' and password == 'Test@123456':
        session['user'] = user_id
        print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")  # Ch·ªâ in ra console, kh√¥ng flash
        return redirect(url_for('dashboard'))
    else:
        flash("Sai th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i!", "danger")
        return redirect(url_for('index'))

@app.route('/logout')
def logout():
    session.pop('user', None)
    print("üëã Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng xu·∫•t.")
    return redirect(url_for('index'))

# =============================
# Dashboard
# =============================
@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        flash("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", "danger")
        return redirect(url_for('index'))
    return render_template('dashboard.html')

# =============================
# H·ªì s∆° EMR
# =============================
@app.route('/emr_profile')
def emr_profile():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c!", "danger")
        return redirect(url_for('index'))
    return render_template('emr_profile.html')

# =============================
# Ph√¢n t√≠ch ·∫£nh y t·∫ø (EMR Prediction)
# =============================
@app.route('/emr_prediction', methods=['GET', 'POST'])
def emr_prediction():
    if 'user' not in session:
        flash("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!", "danger")
        return redirect(url_for('index'))

    prediction_result = None

    if request.method == 'POST':
        file = request.files.get('file')

        if not file or file.filename == '':
            flash("Ch∆∞a ch·ªçn ·∫£nh ƒë·ªÉ t·∫£i l√™n!", "danger")
            return render_template('emr_prediction.html')

        try:
            img = Image.open(file.stream)

            # Chuy·ªÉn ·∫£nh grayscale ‚Üí RGB (n·∫øu c·∫ßn)
            if img.mode != 'RGB':
                img = img.convert('RGB')

            img = img.resize((224, 224))
            img_array = np.expand_dims(np.array(img) / 255.0, axis=0)

            if model is not None:
                preds = model.predict(img_array)
                label = "Nodule" if preds[0][0] > 0.5 else "Non-nodule"
                prediction_result = f"K·∫øt qu·∫£ d·ª± ƒëo√°n: {label} (x√°c su·∫•t: {preds[0][0]:.4f})"
                print(prediction_result)  # ‚úÖ ch·ªâ in ra console, kh√¥ng flash
            else:
                flash("Model ch∆∞a ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!", "danger")

        except Exception as e:
            flash(f"L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}", "danger")

    return render_template('emr_prediction.html', prediction_result=prediction_result)

# =============================
# Kh·ªüi ch·∫°y ·ª©ng d·ª•ng (Render-compatible)
# =============================
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
